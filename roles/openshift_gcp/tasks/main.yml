#TODO ansiblize ssh key provision
#TODO ansiblize DNS config
---
# - name: Provision GCP DNS domain
#   gcdns_zone:
#     zone: "{{ dns_managed_zone | default(openshift_gcp_prefix + 'managed-zone') }}"
#     description: "{{ public_hosted_zone }} domain"
#     state: present
#
- name: Create GCP network
  gcp_compute_network:
    auth_kind: serviceaccount
    scopes:
    - https://www.googleapis.com/auth/compute
    service_account_file: "{{ openshift_gcp_iam_service_account_keyfile }}"
    project: "{{ openshift_gcp_project }}"
    name: "{{ openshift_gcp_network_name }}"
    state: present
  register: network

- name: Create GCP firewall
  gcp_compute_firewall:
    auth_kind: serviceaccount
    scopes:
    - https://www.googleapis.com/auth/compute
    service_account_file: "{{ openshift_gcp_iam_service_account_keyfile }}"
    project: "{{ openshift_gcp_project }}"
    name: "{{ openshift_gcp_prefix }}{{ item.rule }}"
    allowed: "{{ item.allowed }}"
    network: "{{ network.selfLink }}"
    target_tags: "{{ item.target_tags | default(omit) }}"
    source_tags: "{{ item.source_tags | default(omit) }}"
    state: present
  with_items:
  - rule: icmp
    allowed:
    - ip_protocol: 'icmp'
  - rule: ssh-external
    allowed:
    - ip_protocol: 'tcp'
      ports:
      - '22'
  - rule: ssh-internal
    allowed:
    - ip_protocol: 'tcp'
      ports:
      - '22'
    source_tags:
    - ssh-bastion
  - rule: master-internal
    allowed:
    - ip_protocol: 'tcp'
      ports:
      - '2224'
      - '2379'
      - '2380'
      - '4001'
      - "{{ openshift_gcp_kubernetes_api_port }}"
      - "{{ internal_console_port }}"
      - '8053'
      - '8444'
      - "{{ openshift_gcp_master_healthcheck_port }}"
      - '10250'
      - '10255'
      - '24224'
      - "{{ mcd_port }}"
    - ip_protocol: 'udp'
      ports:
      - '4789'
      - '5404'
      - '5405'
      - '10255'
      - '24224'
    source_tags:
    - ocp
    target_tags:
    - ocp-master
    - ocp-bootstrap
  - rule: master-external
    allowed:
    - ip_protocol: 'tcp'
      ports:
      - '80'
      - '443'
      - '1936'
      - "{{ openshift_gcp_master_healthcheck_port }}"
      - "{{ openshift_gcp_kubernetes_api_port }}"
      - "{{ openshift_master_api_port }}"
      - "{{ mcd_port }}"
      - "{{ openshift_node_port_range }}"
    - ip_protocol: 'udp'
      ports:
      - "{{ openshift_node_port_range }}"
    target_tags:
    - ocp-master
    - ocp-bootstrap
  - rule: node-internal
    allowed:
    - ip_protocol: 'tcp'
      ports:
      - '10250'
      - '10255'
      - '9000-10000'
    - ip_protocol: 'udp'
      ports:
      - '4789'
      - '10255'
    source_tags:
    - ocp
    target_tags:
    - ocp-node

#=================
#FIXME
#=================
# - name: DNS entry for public cluster hostname
#   gcp_dns_resource_record_set:
#     auth_kind: serviceaccount
#     scopes:
#       - https://www.googleapis.com/auth/ndev.clouddns.readwrite
#     service_account_file: "{{ openshift_gcp_iam_service_account_keyfile }}"
#     project: "{{ openshift_gcp_project }}"
#     name: "{{ openshift_master_cluster_public_hostname }}."
#     managed_zone:
#       name: "{{ dns_managed_zone }}"
#     type: 'A'
#     ttl: "{{ openshift_gcp_master_dns_ttl }}"
#     target:
#       - "{{ master_external_address.address }}"
#     state: present

# - name: Create router external IP
#   gcp_compute_address:
#     auth_kind: serviceaccount
#     scopes:
#     - https://www.googleapis.com/auth/compute
#     service_account_file: "{{ openshift_gcp_iam_service_account_keyfile }}"
#     project: "{{ openshift_gcp_project }}"
#     region: "{{ openshift_gcp_region }}"
#     name: "{{ openshift_gcp_prefix }}router-network-lb-ip"
#     state: present

- import_tasks: provision_ssh_keys.yml

- name: Find GCP image
  gcp_compute_image_facts:
    auth_kind: serviceaccount
    scopes:
    - https://www.googleapis.com/auth/compute
    service_account_file: "{{ openshift_gcp_iam_service_account_keyfile }}"
    project: "{{ openshift_gcp_project }}"
    filters:
    - "family = {{ openshift_gcp_image }}"
  register: gcp_node_image

- name: Provision GCP instance templates
  gcp_compute_instance_template:
    auth_kind: serviceaccount
    scopes:
    - https://www.googleapis.com/auth/compute
    service_account_file: "{{ openshift_gcp_iam_service_account_keyfile }}"
    project: "{{ openshift_gcp_project }}"
    name: "{{ openshift_gcp_prefix }}instance-template-{{ item.name }}"
    properties:
      machine_type: "{{ item.machine_type }}"
      network_interfaces:
      - network: "{{ network }}"
        access_configs:
        - name: "{{ openshift_gcp_prefix }}instance-template-{{ item.name }}-config"
          type: 'ONE_TO_ONE_NAT'
      disks:
      - auto_delete: true
        boot: true
        initialize_params:
          disk_size_gb: "{{ item.boot_disk_size }}"
          source_image: "{{ gcp_node_image['items'][0].selfLink }}"
      metadata:
        "cluster-id": "{{ openshift_gcp_prefix + openshift_gcp_clusterid }}"
        "node-group": "{{ item.name }}"
      tags:
        items:
        - "ocp"
        - "{{ openshift_gcp_prefix }}ocp"
        - "{{ item.tags }}"
    state: present
  with_items: "{{ openshift_gcp_node_group_config }}"
  register: instance_template

- name: Create GCP Instance Groups
  gcp_compute_instance_group_manager:
    auth_kind: serviceaccount
    scopes:
    - https://www.googleapis.com/auth/compute
    service_account_file: "{{ openshift_gcp_iam_service_account_keyfile }}"
    project: "{{ openshift_gcp_project }}"
    zone: "{{ openshift_gcp_zone }}"
    name: "{{ openshift_gcp_prefix }}ig-{{ item.item.suffix }}"
    base_instance_name: "{{ openshift_gcp_prefix }}ig-{{ item.item.suffix }}"
    instance_template: "{{ item }}"
    target_size: "{{ item.item.scale | int}}"
    named_ports:
      - name: "{{ openshift_gcp_prefix }}port-kube-api"
        port: "{{ openshift_gcp_kubernetes_api_port }}"
      - name: "{{ openshift_gcp_prefix }}port-openshift-api"
        port: "{{ openshift_master_api_port }}"
    state: present
  with_items: "{{ instance_template.results }}"
  register: instance_groups

- name: Get master instance group
  gcp_compute_instance_group_facts:
    auth_kind: serviceaccount
    scopes:
    - https://www.googleapis.com/auth/compute
    service_account_file: "{{ openshift_gcp_iam_service_account_keyfile }}"
    project: "{{ openshift_gcp_project }}"
    zone: "{{ openshift_gcp_zone }}"
    filters:
    - name = "{{ openshift_gcp_prefix }}ig-m"
  register: master_instance_group

- set_fact:
    master_instance_group: "{{ master_instance_group['items'][0] }}"

- name: Wait for master instance group to start all instances
  gcp_compute_instance_group_manager_facts:
    auth_kind: serviceaccount
    scopes:
    - https://www.googleapis.com/auth/compute
    service_account_file: "{{ openshift_gcp_iam_service_account_keyfile }}"
    project: "{{ openshift_gcp_project }}"
    zone: "{{ openshift_gcp_zone }}"
    filters: "name = {{ master_instance_group['name'] }}"
  register: master_group_result
  # Wait for 3 minutes
  retries: 36
  delay: 5
  until:
  - "master_group_result['items'][0]['currentActions']['none'] == master_group_result['items'][0]['targetSize']"

- name: Collect a list of instances
  gcp_compute_instance_facts:
    auth_kind: serviceaccount
    scopes:
    - https://www.googleapis.com/auth/compute
    service_account_file: "{{ openshift_gcp_iam_service_account_keyfile }}"
    project: "{{ openshift_gcp_project }}"
    zone: "{{ openshift_gcp_zone }}"
  register: all_instances

- name: Filter instances to fetch bootstrap
  set_fact:
    bootstrap_instance: "{{ item }}"
  with_items:
    - "{{ all_instances['items'] }}"
  when:
  - "'tags' in item"
  - "'items' in item['tags']"
  - "'{{ openshift_gcp_prefix }}ocp' in item['tags']['items']"
  - "'ocp-bootstrap' in item['tags']['items']"

- name: Filter instances to fetch masters
  set_fact:
    master_instances: "{{ master_instances | default([]) }} + [ {{ item }} ]"
  with_items:
    - "{{ all_instances['items'] }}"
  when:
  - "'tags' in item"
  - "'items' in item['tags']"
  - "'{{ openshift_gcp_prefix }}ocp' in item['tags']['items']"
  - "'ocp-master' in item['tags']['items']"

# - name: DNS entry for each etcd name
#   gcp_dns_resource_record_set:
#     auth_kind: serviceaccount
#     scopes:
#       - https://www.googleapis.com/auth/ndev.clouddns.readwrite
#     service_account_file: "{{ openshift_gcp_iam_service_account_keyfile }}"
#     project: "{{ openshift_gcp_project }}"
#     name: "{{ entry_name }}"
#     managed_zone:
#       name: "{{ dns_managed_zone }}"
#     type: 'A'
#     ttl: "{{ openshift_gcp_master_dns_ttl }}"
#     target:
#       - "{{ ip }}"
#     state: present
#   with_indexed_items: "{{ master_instances }}"
#   vars:
#     entry_name: "{{ openshift_gcp_prefix }}etcd-{{ item.0 }}.{{ lookup('env', 'INSTANCE_PREFIX') | mandatory }}.{{ public_hosted_zone }}."
#     ip: "{{ item.1.networkInterfaces[0].networkIP }}"

- set_fact:
    etcd_discovery_targets: "{{ etcd_discovery_targets | default('') }} '0 0 2380 {{ entry_name }}'"
    master_external_ips: "{{ master_external_ips | default('') }} '{{ master_ip }}'"
  with_indexed_items: "{{ master_instances }}"
  vars:
    entry_name: "{{ openshift_gcp_prefix }}etcd-{{ item.0 }}.{{ public_hosted_zone }}."
    master_ip: "{{ item.1.networkInterfaces[0].accessConfigs[0].natIP }}"

# - name: DNS entry for etcd discovery
#   gcp_dns_resource_record_set:
#     auth_kind: serviceaccount
#     scopes:
#       - https://www.googleapis.com/auth/ndev.clouddns.readwrite
#     service_account_file: "{{ openshift_gcp_iam_service_account_keyfile }}"
#     project: "{{ openshift_gcp_project }}"
#     name: "_etcd-server-ssl._tcp.{{ lookup('env', 'INSTANCE_PREFIX') | mandatory }}.{{ public_hosted_zone }}."
#     managed_zone:
#       name: "{{ dns_managed_zone }}"
#     type: 'SRV'
#     ttl: 600
#     target: "{{ etcd_discovery_targets }}"
#     state: present

# - name: Router LB
# - name: Registry bucket
# - name: Wait for bootstrap group to become stable


#TODO: convert those to ansible tasks
- name: Templatize DNS script
  template: src=additional_settings.j2.sh dest=/tmp/additional_settings.sh mode=u+rx

- name: Run addition provision GCP script
  command: /tmp/additional_settings.sh
  args:
    chdir: "{{ files_dir }}"
